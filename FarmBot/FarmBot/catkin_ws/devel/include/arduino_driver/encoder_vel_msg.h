// Generated by gencpp from file arduino_driver/encoder_vel_msg.msg
// DO NOT EDIT!


#ifndef ARDUINO_DRIVER_MESSAGE_ENCODER_VEL_MSG_H
#define ARDUINO_DRIVER_MESSAGE_ENCODER_VEL_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arduino_driver
{
template <class ContainerAllocator>
struct encoder_vel_msg_
{
  typedef encoder_vel_msg_<ContainerAllocator> Type;

  encoder_vel_msg_()
    : v_FL(0.0)
    , v_FR(0.0)
    , v_BL(0.0)
    , v_BR(0.0)  {
    }
  encoder_vel_msg_(const ContainerAllocator& _alloc)
    : v_FL(0.0)
    , v_FR(0.0)
    , v_BL(0.0)
    , v_BR(0.0)  {
  (void)_alloc;
    }



   typedef float _v_FL_type;
  _v_FL_type v_FL;

   typedef float _v_FR_type;
  _v_FR_type v_FR;

   typedef float _v_BL_type;
  _v_BL_type v_BL;

   typedef float _v_BR_type;
  _v_BR_type v_BR;




  typedef boost::shared_ptr< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> const> ConstPtr;

}; // struct encoder_vel_msg_

typedef ::arduino_driver::encoder_vel_msg_<std::allocator<void> > encoder_vel_msg;

typedef boost::shared_ptr< ::arduino_driver::encoder_vel_msg > encoder_vel_msgPtr;
typedef boost::shared_ptr< ::arduino_driver::encoder_vel_msg const> encoder_vel_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arduino_driver::encoder_vel_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arduino_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'arduino_driver': ['/home/jo/farm_bot_workspace/catkin_ws/src/arduino_driver/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be2929595248f844b23cba7dd4647f3c";
  }

  static const char* value(const ::arduino_driver::encoder_vel_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe2929595248f844ULL;
  static const uint64_t static_value2 = 0xb23cba7dd4647f3cULL;
};

template<class ContainerAllocator>
struct DataType< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arduino_driver/encoder_vel_msg";
  }

  static const char* value(const ::arduino_driver::encoder_vel_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message structure for Encoder velocities \n\
# FL - Front left, FR - Front right, BL - Back left, BR - Back right\n\
\n\
float32	 v_FL	\n\
float32	 v_FR\n\
float32  v_BL\n\
float32  v_BR\n\
";
  }

  static const char* value(const ::arduino_driver::encoder_vel_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.v_FL);
      stream.next(m.v_FR);
      stream.next(m.v_BL);
      stream.next(m.v_BR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct encoder_vel_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arduino_driver::encoder_vel_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arduino_driver::encoder_vel_msg_<ContainerAllocator>& v)
  {
    s << indent << "v_FL: ";
    Printer<float>::stream(s, indent + "  ", v.v_FL);
    s << indent << "v_FR: ";
    Printer<float>::stream(s, indent + "  ", v.v_FR);
    s << indent << "v_BL: ";
    Printer<float>::stream(s, indent + "  ", v.v_BL);
    s << indent << "v_BR: ";
    Printer<float>::stream(s, indent + "  ", v.v_BR);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDUINO_DRIVER_MESSAGE_ENCODER_VEL_MSG_H
