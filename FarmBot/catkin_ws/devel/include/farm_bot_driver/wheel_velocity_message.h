// Generated by gencpp from file farm_bot_driver/wheel_velocity_message.msg
// DO NOT EDIT!


#ifndef FARM_BOT_DRIVER_MESSAGE_WHEEL_VELOCITY_MESSAGE_H
#define FARM_BOT_DRIVER_MESSAGE_WHEEL_VELOCITY_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace farm_bot_driver
{
template <class ContainerAllocator>
struct wheel_velocity_message_
{
  typedef wheel_velocity_message_<ContainerAllocator> Type;

  wheel_velocity_message_()
    : FR_vel(0)
    , FL_vel(0)
    , BR_vel(0)
    , BL_vel(0)  {
    }
  wheel_velocity_message_(const ContainerAllocator& _alloc)
    : FR_vel(0)
    , FL_vel(0)
    , BR_vel(0)
    , BL_vel(0)  {
  (void)_alloc;
    }



   typedef uint32_t _FR_vel_type;
  _FR_vel_type FR_vel;

   typedef uint32_t _FL_vel_type;
  _FL_vel_type FL_vel;

   typedef uint32_t _BR_vel_type;
  _BR_vel_type BR_vel;

   typedef uint32_t _BL_vel_type;
  _BL_vel_type BL_vel;




  typedef boost::shared_ptr< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> const> ConstPtr;

}; // struct wheel_velocity_message_

typedef ::farm_bot_driver::wheel_velocity_message_<std::allocator<void> > wheel_velocity_message;

typedef boost::shared_ptr< ::farm_bot_driver::wheel_velocity_message > wheel_velocity_messagePtr;
typedef boost::shared_ptr< ::farm_bot_driver::wheel_velocity_message const> wheel_velocity_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace farm_bot_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'farm_bot_driver': ['/home/jo/farm_bot_workspace/catkin_ws/src/farm_bot_driver/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "329705fbf5edc3538e8d30fb491f55ed";
  }

  static const char* value(const ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x329705fbf5edc353ULL;
  static const uint64_t static_value2 = 0x8e8d30fb491f55edULL;
};

template<class ContainerAllocator>
struct DataType< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "farm_bot_driver/wheel_velocity_message";
  }

  static const char* value(const ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message structure for wheel angular velocities for Dynamixel series AX\n\
# FR - Front right / FL - Front left / BR - Back right / BL - Back left\n\
# Each wheel can only have positive angular velocities\n\
\n\
uint32 FR_vel\n\
uint32 FL_vel\n\
uint32 BR_vel\n\
uint32 BL_vel\n\
\n\
";
  }

  static const char* value(const ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.FR_vel);
      stream.next(m.FL_vel);
      stream.next(m.BR_vel);
      stream.next(m.BL_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wheel_velocity_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::farm_bot_driver::wheel_velocity_message_<ContainerAllocator>& v)
  {
    s << indent << "FR_vel: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.FR_vel);
    s << indent << "FL_vel: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.FL_vel);
    s << indent << "BR_vel: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.BR_vel);
    s << indent << "BL_vel: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.BL_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FARM_BOT_DRIVER_MESSAGE_WHEEL_VELOCITY_MESSAGE_H
